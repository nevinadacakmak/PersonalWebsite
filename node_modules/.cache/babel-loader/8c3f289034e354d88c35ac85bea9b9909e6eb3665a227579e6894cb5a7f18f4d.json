{"ast":null,"code":"import { useRef, useState, useCallback, useEffect } from 'react';\nimport { canUseDOM, areOptionsEqual, arePluginsEqual } from 'embla-carousel-reactive-utils';\nimport EmblaCarousel from 'embla-carousel';\nfunction useEmblaCarousel() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let plugins = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const storedOptions = useRef(options);\n  const storedPlugins = useRef(plugins);\n  const [emblaApi, setEmblaApi] = useState();\n  const [viewport, setViewport] = useState();\n  const reInit = useCallback(() => {\n    if (emblaApi) emblaApi.reInit(storedOptions.current, storedPlugins.current);\n  }, [emblaApi]);\n  useEffect(() => {\n    if (canUseDOM() && viewport) {\n      EmblaCarousel.globalOptions = useEmblaCarousel.globalOptions;\n      const newEmblaApi = EmblaCarousel(viewport, storedOptions.current, storedPlugins.current);\n      setEmblaApi(newEmblaApi);\n      return () => newEmblaApi.destroy();\n    } else {\n      setEmblaApi(undefined);\n    }\n  }, [viewport, setEmblaApi]);\n  useEffect(() => {\n    if (areOptionsEqual(storedOptions.current, options)) return;\n    storedOptions.current = options;\n    reInit();\n  }, [options, reInit]);\n  useEffect(() => {\n    if (arePluginsEqual(storedPlugins.current, plugins)) return;\n    storedPlugins.current = plugins;\n    reInit();\n  }, [plugins, reInit]);\n  return [setViewport, emblaApi];\n}\nuseEmblaCarousel.globalOptions = undefined;\nexport { useEmblaCarousel as default };","map":{"version":3,"names":["useEmblaCarousel","options","arguments","length","undefined","plugins","storedOptions","useRef","storedPlugins","emblaApi","setEmblaApi","useState","viewport","setViewport","reInit","useCallback","current","useEffect","canUseDOM","EmblaCarousel","globalOptions","newEmblaApi","destroy","areOptionsEqual","arePluginsEqual"],"sources":["/Users/nevinadacakmak/Desktop/Projects/PersonalWebsite/node_modules/embla-carousel-react/src/components/useEmblaCarousel.ts"],"sourcesContent":["import { useRef, useEffect, useState, useCallback } from 'react'\nimport {\n  areOptionsEqual,\n  arePluginsEqual,\n  canUseDOM\n} from 'embla-carousel-reactive-utils'\nimport EmblaCarousel, {\n  EmblaCarouselType,\n  EmblaOptionsType,\n  EmblaPluginType\n} from 'embla-carousel'\n\nexport type EmblaViewportRefType = <ViewportElement extends HTMLElement>(\n  instance: ViewportElement | null\n) => void\n\nexport type UseEmblaCarouselType = [\n  EmblaViewportRefType,\n  EmblaCarouselType | undefined\n]\n\nfunction useEmblaCarousel(\n  options: EmblaOptionsType = {},\n  plugins: EmblaPluginType[] = []\n): UseEmblaCarouselType {\n  const storedOptions = useRef(options)\n  const storedPlugins = useRef(plugins)\n  const [emblaApi, setEmblaApi] = useState<EmblaCarouselType>()\n  const [viewport, setViewport] = useState<HTMLElement>()\n\n  const reInit = useCallback(() => {\n    if (emblaApi) emblaApi.reInit(storedOptions.current, storedPlugins.current)\n  }, [emblaApi])\n\n  useEffect(() => {\n    if (canUseDOM() && viewport) {\n      EmblaCarousel.globalOptions = useEmblaCarousel.globalOptions\n      const newEmblaApi = EmblaCarousel(\n        viewport,\n        storedOptions.current,\n        storedPlugins.current\n      )\n      setEmblaApi(newEmblaApi)\n      return () => newEmblaApi.destroy()\n    } else {\n      setEmblaApi(undefined)\n    }\n  }, [viewport, setEmblaApi])\n\n  useEffect(() => {\n    if (areOptionsEqual(storedOptions.current, options)) return\n    storedOptions.current = options\n    reInit()\n  }, [options, reInit])\n\n  useEffect(() => {\n    if (arePluginsEqual(storedPlugins.current, plugins)) return\n    storedPlugins.current = plugins\n    reInit()\n  }, [plugins, reInit])\n\n  return [<EmblaViewportRefType>setViewport, emblaApi]\n}\n\ndeclare namespace useEmblaCarousel {\n  let globalOptions: EmblaOptionsType | undefined\n}\n\nuseEmblaCarousel.globalOptions = undefined\n\nexport default useEmblaCarousel\n"],"mappings":";;;AAqBA,SAASA,gBAAgBA,CAAA,EAEQ;EAAA,IAD/BC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,EAAE;EAAA,IAC9BG,OAAA,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA6B,EAAE;EAE/B,MAAMI,aAAa,GAAGC,MAAM,CAACN,OAAO,CAAC;EACrC,MAAMO,aAAa,GAAGD,MAAM,CAACF,OAAO,CAAC;EACrC,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGC,QAAQ,EAAqB;EAC7D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGF,QAAQ,EAAe;EAEvD,MAAMG,MAAM,GAAGC,WAAW,CAAC,MAAK;IAC9B,IAAIN,QAAQ,EAAEA,QAAQ,CAACK,MAAM,CAACR,aAAa,CAACU,OAAO,EAAER,aAAa,CAACQ,OAAO,CAAC;EAC7E,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;EAEdQ,SAAS,CAAC,MAAK;IACb,IAAIC,SAAS,EAAE,IAAIN,QAAQ,EAAE;MAC3BO,aAAa,CAACC,aAAa,GAAGpB,gBAAgB,CAACoB,aAAa;MAC5D,MAAMC,WAAW,GAAGF,aAAa,CAC/BP,QAAQ,EACRN,aAAa,CAACU,OAAO,EACrBR,aAAa,CAACQ,OAAO,CACtB;MACDN,WAAW,CAACW,WAAW,CAAC;MACxB,OAAO,MAAMA,WAAW,CAACC,OAAO,EAAE;IACpC,CAAC,MAAM;MACLZ,WAAW,CAACN,SAAS,CAAC;IACxB;EACF,CAAC,EAAE,CAACQ,QAAQ,EAAEF,WAAW,CAAC,CAAC;EAE3BO,SAAS,CAAC,MAAK;IACb,IAAIM,eAAe,CAACjB,aAAa,CAACU,OAAO,EAAEf,OAAO,CAAC,EAAE;IACrDK,aAAa,CAACU,OAAO,GAAGf,OAAO;IAC/Ba,MAAM,EAAE;EACV,CAAC,EAAE,CAACb,OAAO,EAAEa,MAAM,CAAC,CAAC;EAErBG,SAAS,CAAC,MAAK;IACb,IAAIO,eAAe,CAAChB,aAAa,CAACQ,OAAO,EAAEX,OAAO,CAAC,EAAE;IACrDG,aAAa,CAACQ,OAAO,GAAGX,OAAO;IAC/BS,MAAM,EAAE;EACV,CAAC,EAAE,CAACT,OAAO,EAAES,MAAM,CAAC,CAAC;EAErB,OAAO,CAAuBD,WAAW,EAAEJ,QAAQ,CAAC;AACtD;AAMAT,gBAAgB,CAACoB,aAAa,GAAGhB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}