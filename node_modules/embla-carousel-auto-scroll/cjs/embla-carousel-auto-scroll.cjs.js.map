{"version":3,"file":"embla-carousel-auto-scroll.cjs.js","sources":["../src/components/Options.ts","../src/components/AutoScroll.ts"],"sourcesContent":["import { CreateOptionsType } from 'embla-carousel'\n\nexport type OptionsType = CreateOptionsType<{\n  direction: 'forward' | 'backward'\n  speed: number\n  startDelay: number\n  playOnInit: boolean\n  stopOnFocusIn: boolean\n  stopOnInteraction: boolean\n  stopOnMouseEnter: boolean\n  rootNode: ((emblaRoot: HTMLElement) => HTMLElement | null) | null\n}>\n\nexport const defaultOptions: OptionsType = {\n  direction: 'forward',\n  speed: 2,\n  startDelay: 1000,\n  active: true,\n  breakpoints: {},\n  playOnInit: true,\n  stopOnFocusIn: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  rootNode: null\n}\n","import { OptionsType, defaultOptions } from './Options'\nimport {\n  CreatePluginType,\n  OptionsHandlerType,\n  EmblaCarouselType,\n  EngineType,\n  ScrollBodyType\n} from 'embla-carousel'\n\ndeclare module 'embla-carousel' {\n  interface EmblaPluginsType {\n    autoScroll: AutoScrollType\n  }\n\n  interface EmblaEventListType {\n    autoScrollPlay: 'autoScroll:play'\n    autoScrollStop: 'autoScroll:stop'\n  }\n}\n\nexport type AutoScrollType = CreatePluginType<\n  {\n    play: (delay?: number) => void\n    stop: () => void\n    reset: () => void\n    isPlaying: () => boolean\n  },\n  OptionsType\n>\n\nexport type AutoScrollOptionsType = AutoScrollType['options']\n\nfunction AutoScroll(userOptions: AutoScrollOptionsType = {}): AutoScrollType {\n  let options: OptionsType\n  let emblaApi: EmblaCarouselType\n  let destroyed: boolean\n  let playing = false\n  let resume = true\n  let timer = 0\n  let startDelay: number\n  let defaultScrollBehaviour: ScrollBodyType\n\n  function init(\n    emblaApiInstance: EmblaCarouselType,\n    optionsHandler: OptionsHandlerType\n  ): void {\n    emblaApi = emblaApiInstance\n\n    const { mergeOptions, optionsAtMedia } = optionsHandler\n    const optionsBase = mergeOptions(defaultOptions, AutoScroll.globalOptions)\n    const allOptions = mergeOptions(optionsBase, userOptions)\n    options = optionsAtMedia(allOptions)\n\n    if (emblaApi.scrollSnapList().length <= 1) return\n\n    startDelay = options.startDelay\n    destroyed = false\n    defaultScrollBehaviour = emblaApi.internalEngine().scrollBody\n\n    const { eventStore } = emblaApi.internalEngine()\n    const emblaRoot = emblaApi.rootNode()\n    const root = (options.rootNode && options.rootNode(emblaRoot)) || emblaRoot\n    const container = emblaApi.containerNode()\n\n    emblaApi.on('pointerDown', stopScroll)\n\n    if (!options.stopOnInteraction) {\n      emblaApi.on('pointerUp', startScrollOnSettle)\n    }\n\n    if (options.stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', () => {\n        resume = false\n        stopScroll()\n      })\n\n      if (!options.stopOnInteraction) {\n        eventStore.add(root, 'mouseleave', () => {\n          resume = true\n          startScroll()\n        })\n      }\n    }\n\n    if (options.stopOnFocusIn) {\n      eventStore.add(container, 'focusin', () => {\n        stopScroll()\n        emblaApi.scrollTo(emblaApi.selectedScrollSnap(), true)\n      })\n\n      if (!options.stopOnInteraction) {\n        eventStore.add(container, 'focusout', startScroll)\n      }\n    }\n\n    if (options.playOnInit) startScroll()\n  }\n\n  function destroy(): void {\n    emblaApi\n      .off('pointerDown', stopScroll)\n      .off('pointerUp', startScrollOnSettle)\n      .off('settle', onSettle)\n    stopScroll()\n    destroyed = true\n    playing = false\n  }\n\n  function startScroll(): void {\n    if (destroyed || playing) return\n    if (!resume) return\n    emblaApi.emit('autoScroll:play')\n\n    const engine = emblaApi.internalEngine()\n    const { ownerWindow } = engine\n\n    timer = ownerWindow.setTimeout(() => {\n      engine.scrollBody = createAutoScrollBehaviour(engine)\n      engine.animation.start()\n    }, startDelay)\n\n    playing = true\n  }\n\n  function stopScroll(): void {\n    if (destroyed || !playing) return\n    emblaApi.emit('autoScroll:stop')\n\n    const engine = emblaApi.internalEngine()\n    const { ownerWindow } = engine\n\n    engine.scrollBody = defaultScrollBehaviour\n    ownerWindow.clearTimeout(timer)\n    timer = 0\n\n    playing = false\n  }\n\n  function onSettle(): void {\n    if (resume) startScroll()\n    emblaApi.off('settle', onSettle)\n  }\n\n  function startScrollOnSettle(): void {\n    emblaApi.on('settle', onSettle)\n  }\n\n  function createAutoScrollBehaviour(engine: EngineType): ScrollBodyType {\n    const {\n      location,\n      previousLocation,\n      offsetLocation,\n      target,\n      scrollTarget,\n      index,\n      indexPrevious,\n      limit: { reachedMin, reachedMax, constrain },\n      options: { loop }\n    } = engine\n    const directionSign = options.direction === 'forward' ? -1 : 1\n    const noop = (): ScrollBodyType => self\n\n    let bodyVelocity = 0\n    let scrollDirection = 0\n    let rawLocation = location.get()\n    let rawLocationPrevious = 0\n    let hasSettled = false\n\n    function seek(timeStep: number): ScrollBodyType {\n      const fixedDeltaTimeSeconds = timeStep / 1000\n      let directionDiff = 0\n\n      previousLocation.set(location)\n\n      bodyVelocity = directionSign * options.speed * 55\n      rawLocation += bodyVelocity\n      location.add(bodyVelocity * fixedDeltaTimeSeconds)\n      target.set(location)\n\n      directionDiff = rawLocation - rawLocationPrevious\n      scrollDirection = Math.sign(directionDiff)\n      rawLocationPrevious = rawLocation\n\n      const currentIndex = scrollTarget.byDistance(0, false).index\n\n      if (index.get() !== currentIndex) {\n        indexPrevious.set(index.get())\n        index.set(currentIndex)\n        emblaApi.emit('select')\n      }\n\n      const reachedEnd =\n        options.direction === 'forward'\n          ? reachedMin(offsetLocation.get())\n          : reachedMax(offsetLocation.get())\n\n      if (!loop && reachedEnd) {\n        hasSettled = true\n        const constrainedLocation = constrain(location.get())\n        location.set(constrainedLocation)\n        target.set(location)\n        stopScroll()\n      }\n\n      return self\n    }\n\n    const self: ScrollBodyType = {\n      direction: () => scrollDirection,\n      duration: () => -1,\n      velocity: () => bodyVelocity,\n      settled: () => hasSettled,\n      seek,\n      useBaseFriction: noop,\n      useBaseDuration: noop,\n      useFriction: noop,\n      useDuration: noop\n    }\n    return self\n  }\n\n  function play(startDelayOverride?: number): void {\n    if (typeof startDelayOverride !== 'undefined') {\n      startDelay = startDelayOverride\n    }\n    resume = true\n    startScroll()\n  }\n\n  function stop(): void {\n    if (playing) stopScroll()\n  }\n\n  function reset(): void {\n    if (playing) {\n      stopScroll()\n      startScrollOnSettle()\n    }\n  }\n\n  function isPlaying(): boolean {\n    return playing\n  }\n\n  const self: AutoScrollType = {\n    name: 'autoScroll',\n    options: userOptions,\n    init,\n    destroy,\n    play,\n    stop,\n    reset,\n    isPlaying\n  }\n  return self\n}\n\ndeclare namespace AutoScroll {\n  let globalOptions: AutoScrollOptionsType | undefined\n}\n\nAutoScroll.globalOptions = undefined\n\nexport default AutoScroll\n"],"names":["defaultOptions","direction","speed","startDelay","active","breakpoints","playOnInit","stopOnFocusIn","stopOnInteraction","stopOnMouseEnter","rootNode","AutoScroll","userOptions","options","emblaApi","destroyed","playing","resume","timer","defaultScrollBehaviour","init","emblaApiInstance","optionsHandler","mergeOptions","optionsAtMedia","optionsBase","globalOptions","allOptions","scrollSnapList","length","internalEngine","scrollBody","eventStore","emblaRoot","root","container","containerNode","on","stopScroll","startScrollOnSettle","add","startScroll","scrollTo","selectedScrollSnap","destroy","off","onSettle","emit","engine","ownerWindow","setTimeout","createAutoScrollBehaviour","animation","start","clearTimeout","location","previousLocation","offsetLocation","target","scrollTarget","index","indexPrevious","limit","reachedMin","reachedMax","constrain","loop","directionSign","noop","self","bodyVelocity","scrollDirection","rawLocation","get","rawLocationPrevious","hasSettled","seek","timeStep","fixedDeltaTimeSeconds","directionDiff","set","Math","sign","currentIndex","byDistance","reachedEnd","constrainedLocation","duration","velocity","settled","useBaseFriction","useBaseDuration","useFriction","useDuration","play","startDelayOverride","stop","reset","isPlaying","name","undefined"],"mappings":"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"}